using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace java_script_kiddie_2_solver {
    class Program {
        static char[] valids = "0123456789".ToCharArray();
        static int[] sig = new int[] { 137, 80, 78, 71, 13, 10, 26, 10, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52 };
        static Dictionary<int, List<char>> possibles = new Dictionary<int, List<char>>();
        static byte[] bytes = new byte[] { 137, 80, 37, 7, 104, 251, 253, 10, 198, 0, 174, 253, 96, 252, 0, 66, 0, 0, 226, 164, 64, 58, 224, 114, 127, 0, 0, 97, 73, 204, 68, 200, 164, 0, 219, 29, 171, 234, 130, 65, 78, 120, 0, 137, 0, 198, 95, 120, 48, 16, 87, 222, 10, 121, 193, 148, 0, 14, 156, 68, 155, 248, 138, 67, 205, 153, 231, 0, 238, 227, 250, 128, 1, 181, 144, 66, 200, 111, 152, 0, 177, 187, 164, 71, 210, 0, 32, 135, 84, 194, 52, 13, 252, 191, 40, 82, 169, 30, 55, 114, 120, 10, 57, 219, 97, 112, 241, 0, 91, 100, 80, 108, 120, 227, 0, 2, 0, 0, 15, 121, 128, 245, 192, 237, 227, 130, 55, 227, 2, 228, 78, 255, 13, 73, 73, 241, 210, 243, 139, 163, 144, 72, 0, 35, 142, 0, 1, 6, 0, 9, 26, 56, 167, 36, 145, 200, 57, 192, 136, 41, 51, 159, 0, 71, 133, 81, 1, 1, 32, 1, 183, 227, 179, 75, 24, 84, 173, 199, 134, 16, 26, 227, 68, 69, 59, 235, 121, 120, 168, 55, 196, 222, 175, 199, 250, 255, 214, 89, 188, 16, 146, 30, 136, 200, 79, 179, 192, 44, 143, 241, 153, 109, 131, 47, 114, 92, 66, 233, 28, 36, 44, 252, 191, 215, 0, 72, 138, 17, 159, 80, 142, 43, 124, 68, 50, 252, 226, 141, 163, 191, 249, 217, 141, 135, 29, 29, 233, 228, 175, 61, 68, 245, 7, 61, 39, 31, 106, 82, 246, 125, 56, 92, 117, 169, 4, 108, 198, 212, 196, 1, 254, 29, 127, 225, 22, 39, 233, 255, 143, 34, 159, 93, 27, 195, 175, 245, 223, 90, 67, 245, 171, 240, 138, 169, 1, 110, 88, 213, 10, 11, 122, 239, 199, 12, 73, 22, 248, 163, 120, 108, 102, 73, 23, 124, 59, 164, 201, 20, 156, 71, 121, 199, 248, 11, 243, 24, 254, 142, 41, 232, 53, 239, 198, 28, 101, 187, 217, 247, 187, 75, 129, 180, 7, 104, 57, 218, 78, 152, 119, 181, 38, 248, 72, 243, 150, 200, 245, 145, 182, 78, 114, 71, 18, 68, 121, 16, 94, 135, 212, 102, 76, 191, 205, 254, 191, 95, 161, 223, 172, 196, 86, 235, 39, 28, 246, 223, 166, 147, 1, 15, 68, 244, 176, 186, 22, 253, 107, 166, 154, 169, 106, 200, 101, 86, 181, 14, 23, 67, 0, 0, 215, 172, 212, 199, 99, 135, 102, 1, 24, 124, 23, 134, 213, 233, 245, 126, 194, 177, 36, 145, 105, 16, 226, 8, 144, 83, 171, 90, 173, 180, 130, 239, 47, 189, 85, 255, 45, 141, 185, 18, 64, 19, 91, 27, 28, 55, 40, 114, 9, 154, 123, 247, 162, 197, 251, 242, 108, 242, 245, 31, 2, 154, 49, 221, 71, 214, 56, 178, 143, 224, 31, 240, 223, 246, 242, 47, 109, 215, 249, 0, 235, 44, 72, 11, 254, 239, 191, 31, 223, 71, 242, 39, 251, 18, 33, 30, 122, 190, 231, 79, 244, 181, 61, 198, 115, 117, 205, 215, 246, 173, 110, 237, 253, 249, 15, 138, 233, 150, 171, 83, 96, 215, 61, 183, 225, 235, 71, 83, 106, 65, 192, 103, 209, 241, 204, 223, 178, 255, 11, 164, 47, 70, 29, 241, 127, 223, 64, 69, 54, 251, 87, 177, 160, 22, 42, 213, 199, 112, 43, 243, 251, 102, 120, 227, 173, 24, 240, 152, 245, 40, 21, 54, 233, 122, 10, 111, 223, 103, 242, 76, 169, 120, 147, 192, 43, 194, 93, 238, 31, 116, 143, 148, 241, 76, 140, 218, 135, 242, 224, 152, 97, 154, 196, 219, 191, 172, 103, 211, 30, 243, 159, 43, 199, 23, 187, 253, 239, 226, 67, 181, 213, 109, 182, 195, 122, 242, 253, 196, 111, 230, 190, 198, 239, 89, 131, 47, 90, 128, 127, 0, 218, 19, 176, 227, 124, 32, 29, 145, 242, 104, 95, 9, 165, 253, 218, 255, 22, 249, 234, 150, 158, 243, 227, 141, 11, 129, 155, 70, 232, 231, 131, 1, 121, 227, 253, 120, 219, 9, 184, 202, 37, 129, 181, 108, 60, 69, 47, 68, 24, 121, 240, 247, 95, 215 };

        static void Main(string[] args) {
            if (!Directory.Exists("dumps")) Directory.CreateDirectory("dumps");
            for (int i = 0; i < 16; i++) {
                for (int c = 0; c < valids.Length; c++) {
                    int shifter = int.Parse(valids[c].ToString());
                    if (bytes[(((shifter) * 16) % bytes.Length) + i] == sig[i]) {
                        if (!possibles.ContainsKey(i)) possibles[i] = new List<char>();
                        possibles[i].Add(valids[c]);
                        Console.WriteLine(valids[c]);
                    }
                }
                Console.WriteLine("=========");

            }
            Console.WriteLine("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
            List<char[]> listedPossibles = new List<char[]>();

            for (int i = 0; i < 16; i++) {
                listedPossibles.Add(possibles[i].ToArray());
            }

            foreach (char[] k in listedPossibles) {
                foreach (char c in k) {
                    Console.WriteLine(c);
                }
                Console.WriteLine("=========");
            }

            foreach (string k in GetPermutations(0, listedPossibles)) {
                assemblePNG(k);
            }
        }

        static List<string> GetPermutations(int a, List<char[]> x) {
            List<string> retval = new List<string>();
            if (a == x.Count) {
                retval.Add("");
                return retval;
            }
            foreach (Object y in x[a]) {
                foreach (string x2 in GetPermutations(a + 1, x)) {
                    retval.Add(y.ToString() + "" + x2.ToString());
                }

            }
            return retval;
        }

        static void assemblePNG(string key) {
            int LEN = 16;
            byte[] result = new byte[bytes.Length];
            for (int i = 0; i < LEN; i++) {
                int shifter = int.Parse(key[i].ToString());
                for (int j = 0; j < (bytes.Length / LEN); j++) {
                    result[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % bytes.Length) + i];
                }
            }

            List<byte> r = result.ToList();

            while (r.Last() == 0) {
                r.RemoveAt(r.Count() - 1);
            }

            File.WriteAllBytes("dumps\\" + key + ".png", r.ToArray());
        }
    }
}
